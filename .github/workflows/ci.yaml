name: Nerd Font Patcher
permissions: write-all
on:
  workflow_dispatch:
  push:
#    branches:
#      - master
    tags:
      - 'v*'
  #pull_request:
  #  branches:
  #   - master
  # schedule:
  #   - cron: "0 13 * * *"

jobs:
  check-for-new-reddit-sans:
    runs-on: ubuntu-22.04
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    outputs:
      tag_name: ${{ env.REDDITSANSTAG }}
      tag_exists: ${{ steps.check_tag.outputs.exists }}

    steps:
    - uses: oprypin/find-latest-tag@v1
      with:
        repository: reddit/redditsans  # The repository to scan.
        releases-only: false  # We know that all relevant tags have a GitHub release for them.
      id: find_latest_tag  # The step ID to refer to later.
  
    - run: echo "Reddit Sans Mono is at version ${{ steps.find_latest_tag.outputs.tag }}"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Save the latest Reddit Sans tag
      run: |
        echo "REDDITSANSTAG=${{ steps.find_latest_tag.outputs.tag }}" >> $GITHUB_ENV
    - name: Check if tag exists
      uses: mukunku/tag-exists-action@v1.6.0
      id: check_tag
      with:
        tag: ${{ env.REDDITSANSTAG }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Summary
      run: |
        echo "Latest Reddit Sans tag is $REDDITSANSTAG"

  build-and-release:
    needs: check-for-new-reddit-sans
    if: ${{ github.event_name != 'schedule' || needs.check-for-new-reddit-sans.outputs.tag_exists != 'true' }}
    runs-on: ubuntu-22.04
    env:
      REDDITSANSTAG: ${{ needs.check-for-new-reddit-sans.outputs.tag_name }}
      REDDITSANSTAG_ISNOTNEW: ${{ needs.check-for-new-reddit-sans.outputs.tag_exists }}

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Decide on version
      run: |
        if [ "${REDDITSANSTAG_ISNOTNEW}" = "false" ]; then
          echo New release is not tagged yet in our repo
          echo It will only be tagged after successfull release in job 'Create tag'
          OURVERSION=${REDDITSANSTAG}
        else
          echo Re-release uses our manual tags and/or patchlevel
          OURVERSION=`git describe --always --tags`
        fi
        echo "OURVERSION=${OURVERSION}" >> $GITHUB_ENV

    - name: Download latest version of Reddit Sans Mono
      # with:
        # tag: ${{ needs.check-for-new-reddit-sans.outputs.tag_name }}
      run: |
        wget https://github.com/reddit/redditsans/raw/refs/heads/main/fonts/mono/ttf/RedditMono-Regular.ttf
        mv RedditMono-Regular.ttf Readit-Regular.ttf
        wget https://github.com/reddit/redditsans/raw/refs/heads/main/fonts/mono/ttf/RedditMono-Light.ttf
        mv RedditMono-Light.ttf Readit-Light.ttf
        wget https://github.com/reddit/redditsans/raw/refs/heads/main/fonts/mono/ttf/RedditMono-Medium.ttf
        mv RedditMono-Medium.ttf Readit-Medium.ttf
        wget https://github.com/reddit/redditsans/raw/refs/heads/main/fonts/mono/ttf/RedditMono-SemiBold.ttf
        mv RedditMono-SemiBold.ttf Readit-SemiBold.ttf
        wget https://github.com/reddit/redditsans/raw/refs/heads/main/fonts/mono/ttf/RedditMono-Bold.ttf
        mv RedditMono-Bold.ttf Readit-Bold.ttf
        wget https://github.com/reddit/redditsans/raw/refs/heads/main/fonts/mono/ttf/RedditMono-ExtraBold.ttf
        mv RedditMono-ExtraBold.ttf Readit-ExtraBold.ttf

    # Ubuntu 20.04 has only fontforge release 2020, but there are some vital bugfixes in the 2022 release
    # This can be replaced with the ordinary apt package when Ubuntu updates, probably with 22.10?
    # On the other hand ... why not be on the latest release always?
    - name: Fetch FontForge
      run: |
        sudo apt install software-properties-common python3-fontforge fuse -y -q
        curl -L "https://github.com/fontforge/fontforge/releases/download/20230101/FontForge-2023-01-01-a1dad3e-x86_64.AppImage" \
          --output fontforge
        chmod u+x fontforge
        echo Try appimage
        ./fontforge --version
        export PATH=`pwd`:$PATH
        echo "PATH=$PATH" >> $GITHUB_ENV
        echo Try appimage with path
        fontforge --version

    - name: Get Font Patcher
      uses: robinraju/release-downloader@v1.10
      with:
        repository: "ryanoasis/nerd-fonts"
        latest: true
        fileName: "FontPatcher.zip"

    - name: Open Font Patcher release
      run: |
        unzip FontPatcher.zip

    - name: Install PIP
      run: sudo apt install python3-pip -y
    - name: Install configparser
      run: pip3 install configparser
    - name: Extract additional powerline glyphs
      run: fontforge -lang=ff -script "`pwd`/extract-extra-glyphs" "`pwd`" `pwd`/src/glyphs/octicons/octicons.ttf

    - name: Build Mono Powerline
      run: |
        ./do_generate 01 --powerline --mono Readit-Regular.ttf    ReaditSansPL.ttf            "Readit Mono PL"
        ./do_generate 02 --powerline --mono Readit-Bold.ttf       ReaditSansPL-Bold.ttf       "Readit Mono PL"
        ./do_generate 03 --powerline --mono Readit-SemiBold.ttf   ReaditSansPL-SemiBold.ttf   "Readit Mono PL"
        ./do_generate 04 --powerline --mono Readit-ExtraBold.ttf  ReaditSansPL-ExtraBold.ttf  "Readit Mono PL"
        ./do_generate 05 --powerline --mono Readit-Light.ttf      ReaditSansPL-Light.ttf      "Readit Mono PL"
        ./do_generate 06 --powerline --mono Readit-Medium.ttf     ReaditSansPL-Medium.ttf     "Readit Mono PL"
        mkdir ./readit-mono-powerline
        find . -type f -name "*.ttf" -exec mv "./readit-mono-powerline" {} +
        zip -r readit-mono-powerline.zip ./readit-mono-powerline

    - name: Build Mono (Complete)
      run: |
        ./do_generate 07 --complete --mono  Readit-Regular.ttf    ReaditSans.ttf              "Readit Mono"
        ./do_generate 08 --complete --mono  Readit-Bold.ttf       ReaditSans-Bold.ttf         "Readit Mono"
        ./do_generate 09 --complete --mono  Readit-SemiBold.ttf   ReaditSans-SemiBold.ttf     "Readit Mono"
        ./do_generate 10 --complete --mono  Readit-ExtraBold.ttf  ReaditSans-ExtraBold.ttf    "Readit Mono"
        ./do_generate 11 --complete --mono  Readit-Light.ttf      ReaditSans-Light.ttf        "Readit Mono"
        ./do_generate 12 --complete --mono  Readit-Medium.ttf     ReaditSans-Medium.ttf       "Readit Mono"
        mkdir ./readit-mono
        find . -type f -name "*.ttf" -exec mv "./readit-mono" {} +
        zip -r readit-mono.zip ./readit-mono


    - name: Check for preexisting glyphs
      run: |
        grep 'Skipping...' process*.log | grep  -vE ' Powerline(Extra)?Symbols>'

    - uses: actions/upload-artifact@v4
      with:
        name: Readit Sans Mono Powerline
        path: "readit-mono-powerline.zip"

    - uses: actions/upload-artifact@v4
      with:
        name: Readit Sans Mono
        path: "readit-mono.zip"

    # Release part
    - name: Create tag
      if: ${{ github.event_name != 'pull_request' && !startsWith(github.ref, 'refs/tags/') && needs.check-for-new-reddit-sans.outputs.tag_exists != 'true' }}
      uses: EndBug/latest-tag@latest
      with:
        ref: ${{ needs.check-for-new-reddit-sans.outputs.tag_name }}
        description: "Bump Readit Sans version to ${{ needs.check-for-new-reddit-sans.outputs.tag_name }}"

    - name: Get tag name
      id: get_tag_name
      if: ${{ startsWith(github.ref, 'refs/tags/') }}
      uses: battila7/get-version-action@v2

    - name: Release
      uses: softprops/action-gh-release@v2
      if: ${{ github.event_name != 'pull_request' && (startsWith(github.ref, 'refs/tags/') || needs.check-for-new-reddit-sans.outputs.tag_exists != 'true') }}
      with:
        tag_name: ${{ startsWith(github.ref, 'refs/tags/') && steps.get_tag_name.outputs.version || needs.check-for-new-reddit-sans.outputs.tag_name }}
        files: |
          readit-mono-powerline.zip
          readit-mono.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
